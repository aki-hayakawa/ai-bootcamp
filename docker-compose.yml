version: '3.8'

services:
  backend:
    build: ./backend
    container_name: backend
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - rabbitmq
    env_file:
      - .env
    volumes:
      - ./backend:/app

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    restart: always
    depends_on:
      - backend
    env_file:
      - .env
    environment:
      - BACKEND_URL=http://backend:8000
    ports:
      - "5000:5000"
    volumes:
      - ./frontend:/app

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: dbname
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    container_name: redis
    restart: always

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: keycloak
    restart: always
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 5

  analytics:
    build: ./analytics
    container_name: analytics
    restart: always
    depends_on:
      - rabbitmq
      - redis
    env_file:
      - .env

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    ports:
      - "80:80"
      - "443:443"

  minio:
    image: minio/minio
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8082:80"

volumes:
  pgdata:
  keycloak_data:
  minio_data:
